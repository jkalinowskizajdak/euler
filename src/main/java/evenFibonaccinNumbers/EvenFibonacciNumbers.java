package evenFibonaccinNumbers;

import java.math.BigInteger;


/*
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2,
the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million,
find the sum of the even-valued terms.
 */

public class EvenFibonacciNumbers {

    private EvenFibonacciNumbers() {

    }

    private final static long FOUR_MILLIONS = 4000000L;

    public static BigInteger fibonacci(BigInteger n) {
        if (n.equals(BigInteger.ZERO) || n.equals(BigInteger.ONE)) {
            return BigInteger.ONE;
        }
        BigInteger result = fibonacci(n.subtract(BigInteger.valueOf(2)));
        return result.add(fibonacci(n.subtract(BigInteger.ONE)));
    }

    public static BigInteger sum() {
        BigInteger result = BigInteger.ZERO;
        BigInteger value;
        long index = 1;
        while(true) {
            value = fibonacci(BigInteger.valueOf(index));
            if (value.longValue() >= FOUR_MILLIONS) {
                break;
            }
            if (value.longValue() % 2 == 0) {
                result = result.add(value);
            }
            index++;
        }
        return result;
    }

    public static void main(String[] args) {
        System.out.println(sum().toString());
    }
}
